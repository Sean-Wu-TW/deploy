apiVersion: apps/v1
kind: Deployment
metadata:
  #the Deployment Name
  name: demo-react-app
spec:
  #the Number of Pods
  replicas: 2
  selector:
    matchLabels:
      app: demo-react-app
  template:
    metadata:
      labels:
        app: demo-react-app
    spec:
      # Container Details
      containers:
      - name: demo-react-app
        # Docker Image
        image: sean840411/react-sean
        resources:
         #cpu and memory limit
          limits:
            memory: "550Mi"
            cpu: "500m"
        # imagePullPolicy: Never # use this to avoid pull error when pulling from local docker registry
        # ports:
        # # the port on which the app can be reached out inside the container
        # - containerPort: 80

---
#service 
apiVersion: v1
kind: Service
metadata:
   #the Serivce Name- it should match with the lable name of the deployment 
  name: demo-react-app
spec:
  #type of the service
  type: NodePort
  selector:
    app: demo-react-app
  ports:
  - port: 3050
    targetPort: 3000
    protocol: TCP
    nodePort: 31000  # access port from host machine

# Port exposes the Kubernetes service on the specified port within the cluster. 
# Other pods within the cluster can communicate with this server on the specified port.

# TargetPort is the port on which the service will send requests to, that your pod will be listening on. 
# Your application in the container will need to be listening on this port also.
# That is to say, if you have a react container running on port 3000, you should put 3000 here so that k8s knows.

# NodePort exposes a service externally to the cluster by means of the target nodes IP address and the NodePort. 
# NodePort is the default setting if the port field is not specified.

##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################

--- # flask config
apiVersion: v1
kind: Service
metadata:
  name: flask-app-svc  # Access k8s DNS https://stackoverflow.com/questions/57421849/call-a-rest-api-from-one-pod-to-another-pod-in-same-kubernetes-cluster
  labels:
    app: flask-app
spec:
  # type: NodePort
  selector:
    app: flask-app
  ports:
    - port: 3060
      targetPort: 5000
      protocol: TCP
      # nodePort: 32000  # access port from host machine
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-name
  labels:
    app: flask-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: sean840411/flask-sean
        ports:
        - containerPort: 80
      # - name: nginx
      #   image: my-nginx:latest

##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
--- # flask2 config
apiVersion: v1
kind: Service
metadata:
  name: call-you-svc  # Access k8s DNS https://stackoverflow.com/questions/57421849/call-a-rest-api-from-one-pod-to-another-pod-in-same-kubernetes-cluster
  labels:
    app: call-you-app
spec:
  type: LoadBalancer
  selector:
    app: call-you-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
status:
  loadBalancer:
    ingress:
    - ip: 192.0.2.127
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: call-you-app-name
  labels:
    app: call-you-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: call-you-app
  template:
    metadata:
      labels:
        app: call-you-app
    spec:
      containers:
      - name: call-you-app
        image: sean840411/call-you
        ports:
        - containerPort: 80
      # - name: nginx
      #   image: my-nginx:latest

##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################

# docker run -d \
#   -e REPO_URL="https://github.com/Sean-Wu-HV/pdi-monitoring-plugin" \
#   -e RUNNER_NAME="foo-runner" \
#   -e RUNNER_TOKEN="AZOSQPL25KWGI6ZJQGA6JRTC4ALJE" \
#   -e RUNNER_WORKDIR="/tmp/runner/work" \
#   -e ORG_RUNNER="false" \
#   -e LABELS="linux,x64,gpu" \
#   -v /var/run/docker.sock:/var/run/docker.sock \
#   -v /tmp/runner:/tmp/runner \
#   myoung34/github-runner:latest


# --- # Github Runner
# apiVersion: v1
# kind: Service
# metadata:
#   name: runner  # Access k8s DNS https://stackoverflow.com/questions/57421849/call-a-rest-api-from-one-pod-to-another-pod-in-same-kubernetes-cluster
#   labels:
#     app: runner-app
# spec:
#   # type: NodePort
#   selector:
#     app: runner-app
#   ports:
#     - port: 3060
#       targetPort: 5000
#       protocol: TCP
#       # nodePort: 32000  # access port from host machine
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: runner-app-name
#   labels:
#     app: runner-app
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: runner-app
#   template:
#     metadata:
#       labels:
#         app: runner-app
#     spec:
#       containers:
#       - name: runner-app
#         image: myoung34/github-runner:latest
#         ports:
#         - containerPort: 80
# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: runner-app
#   labels:
#     purpose: runner-app
# spec:
#   containers:
#   - name: runner-app-container
#     image: docker.io/myoung34/github-runner:latest
#     env:
#     - name: REPO_URL
#       value: "https://github.com/Sean-Wu-TW/argocd-app"
#     - name: RUNNER_NAME
#       value: "foo-runner"
#     - name: RUNNER_TOKEN
#       value: "AK2TMCE6A7P55U2XH4GQACTDBZQSW"
#     - name: RUNNER_WORKDIR
#       value: "/tmp/runner"
#     - name: ORG_RUNNER
#       value: "false"
#     - name: LABELS
#       value: "linux,x64,gpu"



##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
